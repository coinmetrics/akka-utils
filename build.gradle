buildscript {
    ext {
        akka_version = "2.6+"
        akka_http_version = "10.2.10"
        jackson_version = "2.13.1"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id 'maven-publish'
}

version '1.1.2'

repositories {
    jcenter()
    mavenCentral()
}

compileKotlin {
    kotlinOptions.jvmTarget = '11'
}
compileTestKotlin {
    kotlinOptions.jvmTarget = '11'
}


dependencies {

    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    // jackson
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jackson_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"

    // akka
    implementation "com.typesafe.akka:akka-stream_2.13:$akka_version"
    implementation "com.typesafe.akka:akka-http_2.13:$akka_http_version"
    implementation "com.typesafe.akka:akka-http-jackson_2.13:$akka_http_version"

    // test
    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.+'
}


test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}


task sourceJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.kotlin
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}


publishing {

    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId 'io.coinmetrics'
            artifactId 'akka-utils'
            version version
            pom {
                name = 'Kotlin Akka Library'
                description = 'Useful utility classes'
            }
            artifact sourceJar {
                classifier 'sources'
            }
            artifact javadocJar {
                classifier 'javadoc'
            }
        }
    }

    repositories {
        maven {
            url "https://gitlab.com/api/v4/projects/31574851/packages/maven"
            credentials(HttpHeaderCredentials) {
                if (System.env["CI_JOB_TOKEN"] != null) {
                    name = "Job-Token"
                    value = System.env["CI_JOB_TOKEN"]
                } else {
                    name = "Private-Token"
                    value = gitlabPersonalAccessToken
                }
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }
}


